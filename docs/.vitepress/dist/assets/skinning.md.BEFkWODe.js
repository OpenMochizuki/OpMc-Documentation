import{_ as e,c as n,o as a,ae as r}from"./chunks/framework.Cd-3tpCq.js";const y=JSON.parse('{"title":"Skinning & Customization","description":"","frontmatter":{},"headers":[],"relativePath":"skinning.md","filePath":"skinning.md"}'),i={name:"skinning.md"};function l(s,t,d,o,c,g){return a(),n("div",null,t[0]||(t[0]=[r('<h1 id="skinning-customization" tabindex="-1">Skinning &amp; Customization <a class="header-anchor" href="#skinning-customization" aria-label="Permalink to &quot;Skinning &amp; Customization&quot;">​</a></h1><p>In addition to OpenTaiko&#39;s default skins, users are able to create their own skins.</p><h2 id="lua-scripting" tabindex="-1">Lua Scripting <a class="header-anchor" href="#lua-scripting" aria-label="Permalink to &quot;Lua Scripting&quot;">​</a></h2><p>OpenTaiko&#39;s Lua API allows creators to further customize their skin beyond just replacing textures and sounds, allowing for more dynamic visuals without the need to modify the game&#39;s source code. While most menus can have Lua scripts, most scripts are only suited for animating backgrounds at this time. The capabilities of our Lua API are still a work in progress, and will expand in the future.</p><p>Read-only variables are also provided by OpenTaiko, allowing the creator to change the behavior of their script based on what is happening at that moment.</p><p>Some examples of what can be done with Lua include :</p><ul><li>Being able to read the BPM, gauge percentage, go-go state, and clear status of each active player, and change how visuals are animated using these values.</li><li>Checking what language the user is currently using, allowing for localization support for skins.</li><li>Changing the visuals of a background depending on their Tower progress or AI battle state.</li></ul><h3 id="calling-functions" tabindex="-1">Calling Functions <a class="header-anchor" href="#calling-functions" aria-label="Permalink to &quot;Calling Functions&quot;">​</a></h3><p>Calling Functions are commands that you send to OpenTaiko to execute a function.</p><p>Most of these functions are related to drawing and manipulating textures that your script imports, and does not modify the game itself.</p><table tabindex="0"><thead><tr><th style="text-align:center;">Function</th><th style="text-align:center;">Input Type(s)</th><th style="text-align:center;">Description</th></tr></thead><tbody><tr><td style="text-align:center;"><u><strong>Console Drawing</strong></u></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">func:DrawText(x, y, text)</td><td style="text-align:center;">integer, integer, string</td><td style="text-align:center;">Draws text using the skin&#39;s Console Font. (/Graphics/Console_Font.png)</td></tr><tr><td style="text-align:center;">func:DrawNum(x, y, num)</td><td style="text-align:center;">integer, integer, number</td><td style="text-align:center;">Draws a number using the skin&#39;s Console Font. (/Graphics/Console_Font.png)</td></tr><tr><td style="text-align:center;"><u><strong>Image Drawing</strong></u></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">func:AddGraph(filepath)</td><td style="text-align:center;">string</td><td style="text-align:center;">Load an image file to be used for your script. This is mandatory for drawing functions to work on your image.</td></tr><tr><td style="text-align:center;">func:DrawGraph(x, y, filepath)</td><td style="text-align:center;">integer, integer, string</td><td style="text-align:center;">Draw a given image at a position.</td></tr><tr><td style="text-align:center;">func:DrawGraphCenter(x, y, filepath)</td><td style="text-align:center;">integer, integer, string</td><td style="text-align:center;">Draw a given image at a position, centered at the given coordinates.</td></tr><tr><td style="text-align:center;">func:DrawRectGraph(x, y, rect_x, rect_y, rect_width, rect_height, filepath)</td><td style="text-align:center;">integer, integer, integer, integer, integer, integer, string</td><td style="text-align:center;">Draw a given image at a position.<br>A rectangle is used to specify what portion of the image you want to draw.<br>If a rectangle goes outside the bounds of the given image, it will loop back to continue drawing. This method can be used to repeat textures.</td></tr><tr><td style="text-align:center;">func:DrawGraphRectCenter(x, y, rect_x, rect_y, rect_width, rect_height, filepath)</td><td style="text-align:center;">integer, integer, integer, integer, integer, integer, string</td><td style="text-align:center;">Draw a given image at a position, centered at the given coordinates.<br>A rectangle is used to specify what portion of the image you want to draw.<br>If a rectangle goes outside the bounds of the given image, it will loop back to continue drawing. This method can be used to repeat textures.</td></tr><tr><td style="text-align:center;"><u><strong>Image Manipulation</strong></u></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">func:SetScale(x_scale, y_scale, filepath)</td><td style="text-align:center;">number, number, string</td><td style="text-align:center;">Set the scale of your image. 1.0 is the default value.</td></tr><tr><td style="text-align:center;">func:SetRotation(rotation, filepath)</td><td style="text-align:center;">number, string</td><td style="text-align:center;">Set the rotation of your image. Value is typically between 0 and 360.</td></tr><tr><td style="text-align:center;">func:SetOpacity(opacity, filepath)</td><td style="text-align:center;">integer, string</td><td style="text-align:center;">Set the opacity of a given image. Value must be between 0 and 255.</td></tr><tr><td style="text-align:center;">func:SetColor(r, g, b, filepath)</td><td style="text-align:center;">number, number, number, string</td><td style="text-align:center;">Use a Multiply filter to recolor your image. All values must be between 0.0 and 1.0.</td></tr><tr><td style="text-align:center;">func:SetBlendMode(mode, filepath)</td><td style="text-align:center;">string, string</td><td style="text-align:center;">Specify how an image should blend into the background.<br>Blend modes available are: &quot;Normal&quot;, &quot;Add&quot;, &quot;Multi&quot; (Multiply), &quot;Sub&quot; (Subtract), &quot;Screen&quot;</td></tr><tr><td style="text-align:center;"><u><strong>Image Information</strong></u></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">func:GetTextureWidth(filepath)</td><td style="text-align:center;">string</td><td style="text-align:center;">Get the width of the loaded texture. Returns -1 if the texture is nil.</td></tr><tr><td style="text-align:center;">func:GetTextureHeight(filepath)</td><td style="text-align:center;">string</td><td style="text-align:center;">Get the height of the loaded texture. Returns -1 if the texture is nil.</td></tr></tbody></table><h3 id="receiving-functions" tabindex="-1">Receiving Functions <a class="header-anchor" href="#receiving-functions" aria-label="Permalink to &quot;Receiving Functions&quot;">​</a></h3><p>Receiving Functions are commands that OpenTaiko sends to your script.</p><p>Some of these functions are called every frame, while others are only called when necessary. Some can also be called multiple times per frame.</p><table tabindex="0"><thead><tr><th style="text-align:center;">Function</th><th style="text-align:center;">Variable Type(s)</th><th style="text-align:center;">Description</th></tr></thead><tbody><tr><td style="text-align:center;"><u><strong>General</strong></u></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">function init()</td><td style="text-align:center;">-</td><td style="text-align:center;">Called once when the script is first loaded. This is used to initialize data, including images.</td></tr><tr><td style="text-align:center;">function update()</td><td style="text-align:center;">-</td><td style="text-align:center;">Called once every frame. Used to calculate &amp; update values. Temporarily stops being called if the game is paused.<br>This is always called before draw().</td></tr><tr><td style="text-align:center;">function draw()</td><td style="text-align:center;">-</td><td style="text-align:center;">Called once every frame. Used to manipulate and draw images.</td></tr><tr><td style="text-align:center;"><u><strong>In-Game Only</strong></u></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">function clearIn(player)</td><td style="text-align:center;">integer</td><td style="text-align:center;">Called once when a player has reached the clear range. The player value is the player ID that has entered the clear range.<br>The player ID starts at 0 and ends at 4.<br>0 for 1P, 1 for 2P, 2 for 3P, etc.</td></tr><tr><td style="text-align:center;">function clearOut(player)</td><td style="text-align:center;">integer</td><td style="text-align:center;">Called once when a player has dropped from the clear range. The player value is the player ID that has dropped from the clear range.</td></tr><tr><td style="text-align:center;"><u><strong>In-Game Only (Kusudama)</strong></u></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">function kusuIn()</td><td style="text-align:center;">-</td><td style="text-align:center;">Called once when a Kusudama sequence has started.</td></tr><tr><td style="text-align:center;">function kusuBroke()</td><td style="text-align:center;">-</td><td style="text-align:center;">Called once when a Kusudama was successfully cleared.</td></tr><tr><td style="text-align:center;">function kusuMiss()</td><td style="text-align:center;">-</td><td style="text-align:center;">Called once when a Kusudama has failed to clear before the sequence has ended.</td></tr><tr><td style="text-align:center;"><u><strong>In-Game Only (Ending)</strong></u></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">function update(player)</td><td style="text-align:center;">integer</td><td style="text-align:center;">Called every frame. Used to calculate &amp; update values. Unlike the original function, this is called for each player ID qualified to run this script.<br>Can run multiple times in a single frame.</td></tr><tr><td style="text-align:center;">function draw(player)</td><td style="text-align:center;">integer</td><td style="text-align:center;">Called every frame. Used to manipulate &amp; draw images. Unlike the original function, this is called for each player ID qualified to run this script.<br>Can run multiple times in a single frame.</td></tr><tr><td style="text-align:center;">function playEndAnime(player)</td><td style="text-align:center;">integer</td><td style="text-align:center;">Called once when a course is finished. The player value is the player ID qualified to run this script.<br>Can run multiple times in a single frame.</td></tr><tr><td style="text-align:center;"><u><strong>Results Only</strong></u></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">function skipAnime()</td><td style="text-align:center;">-</td><td style="text-align:center;">Called once when any player skips the Results Screen animation.</td></tr><tr><td style="text-align:center;"><u><strong>Song Select Only</strong></u></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">function playAnime()</td><td style="text-align:center;">-</td><td style="text-align:center;">Called when a player on the difficulty select screen swaps between Extreme and Extra difficulty.<br>Animation duration is specified in the Skin Config files.</td></tr></tbody></table><h3 id="variables" tabindex="-1">Variables <a class="header-anchor" href="#variables" aria-label="Permalink to &quot;Variables&quot;">​</a></h3><p>OpenTaiko gives variables with read-only values to get details about what&#39;s happening at that moment.</p><p>Some details include information about what state a player is in, while others may provide detail about the gamemode status or certain application parameters.</p><p>Because these variables are already reserved, you can not create your own variables with the same names as the ones listed below.</p><table tabindex="0"><thead><tr><th style="text-align:center;">Variable Name</th><th style="text-align:center;">Type</th><th style="text-align:center;">Description</th></tr></thead><tbody><tr><td style="text-align:center;"><u><strong>Application Information</strong></u></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">fps</td><td style="text-align:center;">integer</td><td style="text-align:center;">Gets the framerate of the application.</td></tr><tr><td style="text-align:center;">deltaTime</td><td style="text-align:center;">number</td><td style="text-align:center;">Gets the amount of time that has passed since the last frame was drawn.<br>Non-integral, valued in seconds (i.e. 0.0166666...)</td></tr><tr><td style="text-align:center;">lang</td><td style="text-align:center;">string</td><td style="text-align:center;">Gets the current selected language as a short string format.<br>(i.e. &quot;en&quot;, &quot;ja&quot;, &quot;fr&quot;, etc.)</td></tr><tr><td style="text-align:center;"><u><strong>Player Information</strong></u></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">playerCount</td><td style="text-align:center;">integer</td><td style="text-align:center;">Gets the current number of active players.</td></tr><tr><td style="text-align:center;">p1IsBlue</td><td style="text-align:center;">boolean</td><td style="text-align:center;">Gets a bool stating if Player 1 is blue. (via. selecting Right in the title menu)<br>1P only; Returns false if not blue, or if there are 2 or more players.</td></tr><tr><td style="text-align:center;">characterRarities</td><td style="text-align:center;">string[]</td><td style="text-align:center;">Gets each player&#39;s Character rarity.<br>Possible rarities: &quot;Poor&quot;/&quot;Common&quot;/&quot;Uncommon&quot;/&quot;Rare&quot;/&quot;Epic&quot;/&quot;Legendary&quot;/&quot;Mythical&quot;</td></tr><tr><td style="text-align:center;">puchicharaRarities</td><td style="text-align:center;">string[]</td><td style="text-align:center;">Gets each player&#39;s Puchichara rarity.<br>Possible rarities: &quot;Poor&quot;/&quot;Common&quot;/&quot;Uncommon&quot;/&quot;Rare&quot;/&quot;Epic&quot;/&quot;Legendary&quot;/&quot;Mythical&quot;</td></tr><tr><td style="text-align:center;"><u><strong>Player Information (In-Game)</strong></u></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">bpm</td><td style="text-align:center;">number[]</td><td style="text-align:center;">Gets a list of numbers for each player that tell what BPM their chart is currently on.<br>Can be different for each player.</td></tr><tr><td style="text-align:center;">gauge</td><td style="text-align:center;">number[]</td><td style="text-align:center;">Gets a list of numbers between 0-100 for each player that tell where the player is on the soul gauge.</td></tr><tr><td style="text-align:center;">isClear</td><td style="text-align:center;">boolean[]</td><td style="text-align:center;">Gets a list of booleans for each player that tell if each player is clearing their course.</td></tr><tr><td style="text-align:center;">gogo</td><td style="text-align:center;">boolean[]</td><td style="text-align:center;">Gets a list of booleans for each player that tell if Go-Go Time is currently active.</td></tr><tr><td style="text-align:center;"><u><strong>Gameplay Information</strong></u></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">timeStamp</td><td style="text-align:center;">number</td><td style="text-align:center;">Gets the amount of time in seconds that have passed since the chart has begun, beginning at the first measure.<br>Can be negative if the chart hasn&#39;t started yet.</td></tr></tbody></table>',20)]))}const h=e(i,[["render",l]]);export{y as __pageData,h as default};
